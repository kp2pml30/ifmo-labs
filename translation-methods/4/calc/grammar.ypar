-- module Par (parse) where
-- import Token

%token Token
%file Int

num <== TNum y
	==> y
add
	<== TAdd
sub
	<== TSub
muldiv
	<== TMul
	==> (*)
	<== TDiv
	==> div
pow
	<== TPow
	==> (^)
lpar <== TLParen
rpar <== TRParen

FILE
	| EXPR ==> id

EXPR
	| ADDSUB ==> id

%oper l ADDSUB ADDSUBOP MULDIV
%oper l MULDIV muldiv POW
%oper r POW pow ATOM

ADDSUBOP
	| add ==> const (+)
	| sub ==> const (-)

ATOM
	| num ==> id
	| sub ATOM ==> \_ a -> negate a
	| lpar EXPR rpar ==> const const

