-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Gen.SkelSyntax where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Gen.AbsSyntax

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transStellaIdent :: Gen.AbsSyntax.StellaIdent -> Result
transStellaIdent x = case x of
  Gen.AbsSyntax.StellaIdent string -> failure x

transExtensionName :: Gen.AbsSyntax.ExtensionName -> Result
transExtensionName x = case x of
  Gen.AbsSyntax.ExtensionName string -> failure x

transMemoryAddress :: Gen.AbsSyntax.MemoryAddress -> Result
transMemoryAddress x = case x of
  Gen.AbsSyntax.MemoryAddress string -> failure x

transProgram :: Gen.AbsSyntax.Program -> Result
transProgram x = case x of
  Gen.AbsSyntax.AProgram languagedecl extensions decls -> failure x

transLanguageDecl :: Gen.AbsSyntax.LanguageDecl -> Result
transLanguageDecl x = case x of
  Gen.AbsSyntax.LanguageCore -> failure x

transExtension :: Gen.AbsSyntax.Extension -> Result
transExtension x = case x of
  Gen.AbsSyntax.AnExtension extensionnames -> failure x

transDecl :: Gen.AbsSyntax.Decl -> Result
transDecl x = case x of
  Gen.AbsSyntax.DeclFun annotations stellaident paramdecls returntype throwtype decls expr -> failure x
  Gen.AbsSyntax.DeclFunGeneric annotations stellaident stellaidents paramdecls returntype throwtype decls expr -> failure x
  Gen.AbsSyntax.DeclTypeAlias stellaident type_ -> failure x
  Gen.AbsSyntax.DeclExceptionType type_ -> failure x
  Gen.AbsSyntax.DeclExceptionVariant stellaident type_ -> failure x

transLocalDecl :: Gen.AbsSyntax.LocalDecl -> Result
transLocalDecl x = case x of
  Gen.AbsSyntax.ALocalDecl decl -> failure x

transAnnotation :: Gen.AbsSyntax.Annotation -> Result
transAnnotation x = case x of
  Gen.AbsSyntax.InlineAnnotation -> failure x

transParamDecl :: Gen.AbsSyntax.ParamDecl -> Result
transParamDecl x = case x of
  Gen.AbsSyntax.AParamDecl stellaident type_ -> failure x

transReturnType :: Gen.AbsSyntax.ReturnType -> Result
transReturnType x = case x of
  Gen.AbsSyntax.NoReturnType -> failure x
  Gen.AbsSyntax.SomeReturnType type_ -> failure x

transThrowType :: Gen.AbsSyntax.ThrowType -> Result
transThrowType x = case x of
  Gen.AbsSyntax.NoThrowType -> failure x
  Gen.AbsSyntax.SomeThrowType types -> failure x

transType :: Gen.AbsSyntax.Type -> Result
transType x = case x of
  Gen.AbsSyntax.TypeFun types type_ -> failure x
  Gen.AbsSyntax.TypeForAll stellaidents type_ -> failure x
  Gen.AbsSyntax.TypeRec stellaident type_ -> failure x
  Gen.AbsSyntax.TypeSum type_1 type_2 -> failure x
  Gen.AbsSyntax.TypeTuple types -> failure x
  Gen.AbsSyntax.TypeRecord recordfieldtypes -> failure x
  Gen.AbsSyntax.TypeVariant variantfieldtypes -> failure x
  Gen.AbsSyntax.TypeList type_ -> failure x
  Gen.AbsSyntax.TypeBool -> failure x
  Gen.AbsSyntax.TypeNat -> failure x
  Gen.AbsSyntax.TypeUnit -> failure x
  Gen.AbsSyntax.TypeTop -> failure x
  Gen.AbsSyntax.TypeBottom -> failure x
  Gen.AbsSyntax.TypeRef type_ -> failure x
  Gen.AbsSyntax.TypeVar stellaident -> failure x

transMatchCase :: Gen.AbsSyntax.MatchCase -> Result
transMatchCase x = case x of
  Gen.AbsSyntax.AMatchCase pattern_ expr -> failure x

transOptionalTyping :: Gen.AbsSyntax.OptionalTyping -> Result
transOptionalTyping x = case x of
  Gen.AbsSyntax.NoTyping -> failure x
  Gen.AbsSyntax.SomeTyping type_ -> failure x

transPatternData :: Gen.AbsSyntax.PatternData -> Result
transPatternData x = case x of
  Gen.AbsSyntax.NoPatternData -> failure x
  Gen.AbsSyntax.SomePatternData pattern_ -> failure x

transExprData :: Gen.AbsSyntax.ExprData -> Result
transExprData x = case x of
  Gen.AbsSyntax.NoExprData -> failure x
  Gen.AbsSyntax.SomeExprData expr -> failure x

transPattern :: Gen.AbsSyntax.Pattern -> Result
transPattern x = case x of
  Gen.AbsSyntax.PatternVariant stellaident patterndata -> failure x
  Gen.AbsSyntax.PatternInl pattern_ -> failure x
  Gen.AbsSyntax.PatternInr pattern_ -> failure x
  Gen.AbsSyntax.PatternTuple patterns -> failure x
  Gen.AbsSyntax.PatternRecord labelledpatterns -> failure x
  Gen.AbsSyntax.PatternList patterns -> failure x
  Gen.AbsSyntax.PatternCons pattern_1 pattern_2 -> failure x
  Gen.AbsSyntax.PatternFalse -> failure x
  Gen.AbsSyntax.PatternTrue -> failure x
  Gen.AbsSyntax.PatternUnit -> failure x
  Gen.AbsSyntax.PatternInt integer -> failure x
  Gen.AbsSyntax.PatternSucc pattern_ -> failure x
  Gen.AbsSyntax.PatternVar stellaident -> failure x

transLabelledPattern :: Gen.AbsSyntax.LabelledPattern -> Result
transLabelledPattern x = case x of
  Gen.AbsSyntax.ALabelledPattern stellaident pattern_ -> failure x

transBinding :: Gen.AbsSyntax.Binding -> Result
transBinding x = case x of
  Gen.AbsSyntax.ABinding stellaident expr -> failure x

transExpr :: Gen.AbsSyntax.Expr -> Result
transExpr x = case x of
  Gen.AbsSyntax.Sequence expr1 expr2 -> failure x
  Gen.AbsSyntax.Assign expr1 expr2 -> failure x
  Gen.AbsSyntax.If expr1 expr2 expr3 -> failure x
  Gen.AbsSyntax.Let patternbindings expr -> failure x
  Gen.AbsSyntax.LetRec patternbindings expr -> failure x
  Gen.AbsSyntax.TypeAbstraction stellaidents expr -> failure x
  Gen.AbsSyntax.LessThan expr1 expr2 -> failure x
  Gen.AbsSyntax.LessThanOrEqual expr1 expr2 -> failure x
  Gen.AbsSyntax.GreaterThan expr1 expr2 -> failure x
  Gen.AbsSyntax.GreaterThanOrEqual expr1 expr2 -> failure x
  Gen.AbsSyntax.Equal expr1 expr2 -> failure x
  Gen.AbsSyntax.NotEqual expr1 expr2 -> failure x
  Gen.AbsSyntax.TypeAsc expr type_ -> failure x
  Gen.AbsSyntax.TypeCast expr type_ -> failure x
  Gen.AbsSyntax.Abstraction paramdecls expr -> failure x
  Gen.AbsSyntax.Variant stellaident exprdata -> failure x
  Gen.AbsSyntax.Match expr matchcases -> failure x
  Gen.AbsSyntax.List exprs -> failure x
  Gen.AbsSyntax.Add expr1 expr2 -> failure x
  Gen.AbsSyntax.Subtract expr1 expr2 -> failure x
  Gen.AbsSyntax.LogicOr expr1 expr2 -> failure x
  Gen.AbsSyntax.Multiply expr1 expr2 -> failure x
  Gen.AbsSyntax.Divide expr1 expr2 -> failure x
  Gen.AbsSyntax.LogicAnd expr1 expr2 -> failure x
  Gen.AbsSyntax.Ref expr -> failure x
  Gen.AbsSyntax.Deref expr -> failure x
  Gen.AbsSyntax.Application expr exprs -> failure x
  Gen.AbsSyntax.TypeApplication expr types -> failure x
  Gen.AbsSyntax.DotRecord expr stellaident -> failure x
  Gen.AbsSyntax.DotTuple expr integer -> failure x
  Gen.AbsSyntax.Tuple exprs -> failure x
  Gen.AbsSyntax.Record bindings -> failure x
  Gen.AbsSyntax.ConsList expr1 expr2 -> failure x
  Gen.AbsSyntax.Head expr -> failure x
  Gen.AbsSyntax.IsEmpty expr -> failure x
  Gen.AbsSyntax.Tail expr -> failure x
  Gen.AbsSyntax.Panic -> failure x
  Gen.AbsSyntax.Throw expr -> failure x
  Gen.AbsSyntax.TryCatch expr1 pattern_ expr2 -> failure x
  Gen.AbsSyntax.TryWith expr1 expr2 -> failure x
  Gen.AbsSyntax.Inl expr -> failure x
  Gen.AbsSyntax.Inr expr -> failure x
  Gen.AbsSyntax.Succ expr -> failure x
  Gen.AbsSyntax.LogicNot expr -> failure x
  Gen.AbsSyntax.Pred expr -> failure x
  Gen.AbsSyntax.IsZero expr -> failure x
  Gen.AbsSyntax.Fix expr -> failure x
  Gen.AbsSyntax.NatRec expr1 expr2 expr3 -> failure x
  Gen.AbsSyntax.Fold type_ expr -> failure x
  Gen.AbsSyntax.Unfold type_ expr -> failure x
  Gen.AbsSyntax.ConstTrue -> failure x
  Gen.AbsSyntax.ConstFalse -> failure x
  Gen.AbsSyntax.ConstUnit -> failure x
  Gen.AbsSyntax.ConstInt integer -> failure x
  Gen.AbsSyntax.ConstMemory memoryaddress -> failure x
  Gen.AbsSyntax.Var stellaident -> failure x

transPatternBinding :: Gen.AbsSyntax.PatternBinding -> Result
transPatternBinding x = case x of
  Gen.AbsSyntax.APatternBinding pattern_ expr -> failure x

transVariantFieldType :: Gen.AbsSyntax.VariantFieldType -> Result
transVariantFieldType x = case x of
  Gen.AbsSyntax.AVariantFieldType stellaident optionaltyping -> failure x

transRecordFieldType :: Gen.AbsSyntax.RecordFieldType -> Result
transRecordFieldType x = case x of
  Gen.AbsSyntax.ARecordFieldType stellaident type_ -> failure x

transTyping :: Gen.AbsSyntax.Typing -> Result
transTyping x = case x of
  Gen.AbsSyntax.ATyping expr type_ -> failure x
