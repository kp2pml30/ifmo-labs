

# This file was *autogenerated* from the file ./3.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0)
import sys
from sage import *

if len(sys.argv) != _sage_const_3 :
	print('Usage: n, d')
	exit(_sage_const_1 )
q = _sage_const_2 
n = int(sys.argv[_sage_const_1 ])
d = int(sys.argv[_sage_const_2 ])
k = None

print(f'q = {q}\nn = {n}\nd = {d}\nk = {k}')

def ham(q, n, d):
	t = (d - _sage_const_1 ) // _sage_const_2 
	sm = _sage_const_0 
	for i in range(t+_sage_const_1 ):
		sm += binomial(n, i) * (q - _sage_const_1 ) ** i
	return log(q**n / sm, _sage_const_2 )

def ham_test(q, n, d, k):
	return k <= ham(q, n, d)

def greism(q, n, d, k):
	sm = _sage_const_0 
	for i in range(k):
		sm += ceil(d / _sage_const_2 **i)
	return sm

def greism_test(q, n, d, k):
	return n < greism(q, n, d, k)

def gilbVarch(q, n, d, k):
	sm = _sage_const_0 
	for i in range(d - _sage_const_2  + _sage_const_1 ):
		sm += binomial(n - _sage_const_1 , i) * (q-_sage_const_1 )**i
	return sm

def gilbVarch_test(q, n, d, k):
	r = n - k
	return q**r <= gilbVarch(q, n, d, k)

"""
def opt(t):

print(f'Hamming {ham(q, n, d).n()}')
print(f'Griesmer_k {greism_k(q, n, d).n()}')
print(f'Gilbert-Varshamov_k {gilbVarch_k(q, n, d).n()}')
"""

k = d
d = None

print(f'q = {q}\nn = {n}\nd = {d}\nk = {k}')


